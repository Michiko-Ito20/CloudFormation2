AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  TestVPC:
    Type: String

  publicsubnet01:
    Type: String

  publicsubnet02:
    Type: String

  privatesubnet01:
    Type: String

  privatesubnet02:
    Type: String

  TestRouteTable1:
    Type: String

  TestRouteTable2:
      Type: String

  TestSecurityGroup:
      Type: String

Resources:
  ALBSecurityGroup:                    #ALBのセキュリティグループ
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: !Sub ${AWS::StackName}-alb-sg  #これができたら、alb-sgという名前で作成する
        GroupDescription: ALB SG   #グループの説明、ALBSG
        VpcId: !ImportValue VPCName          #VPCはTestVPC=出力名に紐づけてインポートする
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName}-alb-sg  #現在は無いが、alb-sgという名前で作成する
        SecurityGroupIngress:
          - IpProtocol: tcp     #プロトコル番号はtcp
            CidrIp: 172.31.0.0/16   #IPv4のサイダー
            FromPort: 80     #通信のポート番号（ここから）
            ToPort: 80   #通信のポート番号（ここへ）


  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup   #EC2のセキュリティグループ
    Properties:
      GroupName: EC2-SecurityGroup
      GroupDescription: EC2-SecurityGroup
      VpcId: !ImportValue VPCName   #VPCはTestVPCに紐づけてインポートする
      SecurityGroupIngress:
      - 
        IpProtocol: tcp
        CidrIp: 172.31.0.0/16
        FromPort: "22"   #インバウンドルールSSHサーバの接続待ち受け用
        ToPort: "22"


  EC2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref EC2Role
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-profile


  EC2Role:
    Type: AWS::IAM::Role
    Properties:
        Path: "/"
        RoleName: !Sub ${AWS::StackName}-ec2-role
        Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-role
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  KeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub ${AWS::StackName}-keypair


  TestEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0b7546e839d7ace12
      KeyName: RaiseTech_Study6
      InstanceType: t2.micro
      InstanceInitiatedShutdownBehavior: stop
      Tenancy: default
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !ImportValue Createpublicsubnet01           #publicsubnet01に紐づけてインポートする
          GroupSet:
            - !Ref EC2SecurityGroup                     #TestSecurityGroupからEC2SecurityGroupへ変更
          PrivateIpAddress: 172.31.0.4  #第4オクテッドの数字は4～255までのいずれかに変更できる

      Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName}-ec2-instance   #test_linux_instanceから変更
      
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 10

      UserData: !Base64 |
        sudo hostnamectl set-hostname TEST-LINUX-INSTANCE


  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: "internet-facing"
      Name: !Sub ${AWS::StackName}-alb
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
      IpAddressType: ipv4
      Subnets: 
        - !ImportValue Createpublicsubnet01         #publicsubnet01に紐づけてインポートする
        - !ImportValue Createpublicsubnet02         #publicsubnet02に紐づけてインポートする
      SecurityGroups: 
        - !Ref ALBSecurityGroup


  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tg
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: '200'
      VpcId: !ImportValue VPCName   #VPCはTestVPCに紐づけてインポートする
      TargetType: instance
      Targets:
        - Id: !Ref TestEC2Instance   #WebServerからTestEC2Instanceへ変更。そもそもWebServerというIdを設定していない！


Outputs:
  TestEC2Instance:
    Value: !Ref TestEC2Instance
    Export:
      Name: TestEC2InstanceName

  ALB:
    Value: !Ref ALB
    Export:
      Name: ALBName
